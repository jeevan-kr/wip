spamD <- read.table('spamD.tsv', header = T, sep = '\t')
spamTrain <- subset(spamD, spamD$rgroup >=10)
spamTrain <- subset(spamD, spamD$rgroup >=10)
spamTest <- subset(spamD, spamD$rgroup <10)
list('rgroup', 'spam')
setdif(colnames(spamD), list('rgroup', 'spam'))
colnames(spamD)
setdiff(colnames(spamD), list('rgroup', 'spam'))
spamVars <- setdiff(colnames(spamD), list('rgroup', 'spam'))
paste(spamVars, collapse = ' + ')
paste('spam=="spam"', paste(spamVars, collapse = ' + '), sep = ' ~ ')
spamFormula <- as.formula(paste('spam=="spam"', paste(spamVars, collapse = ' + '), sep = ' ~ '))
spamModel <- glm(spamFormula, family = binomial(link='logit'), data = spamTrain)
summary(spamModel)
spamTrain$pred <- predict(spamModel, newdata = spamTrain, type = 'response')
spamTest$pred <- predict(spamModel, newdata = spamTest, type = 'response')
print(with(spamTest, table(y=spam, glmPred=pred>0.5)))
library(ROCR)
eval <- prediction(spamTest$pred, spamTest$spam)
plot(performance(eval, "tpr", "fpr") )
print(attributes(performance(eval, 'auc'))$y.values[[1]])
performance(eval, 'auc')
eval
ggplot(data=spamTest) + geom_density(aes(x=pred, color = spam, linetype=spam))
library (ggplot2)
ggplot(data=spamTest) + geom_density(aes(x=pred, color = spam, linetype=spam))
plot(performance(eval, "tpr", "fpr") )
print(attributes(performance(eval, 'auc'))$y.values[[1]])
sum(ifelse(spamTest$spam == 'spam', log(spamTest$pred), log(1-spamTest$pred) ))
sum(ifelse(spamTest$spam == 'spam', log(spamTest$pred), log(1-spamTest$pred)))/dim(spamTest)[[1]]
pNull <- sum(ifelse(spamTest$spam == 'spam',1,0))/dim(spamTest)[[1]]
dim(spamTest)[[1]]
dim(spamTest)
spamTest
sum(ifelse(spamTest$spam=='spam',1,0)) *log(pNull) + sum(ifelse(spamTest$spam=='spam',0,1)) *log(1-pNull)
entropy <- function(x) {
xpos <- x[x>0]
scaled <- xpos/sum(xpos)
sum(-scaled*log(scaled,2))
}
print(entropy(table(spamTest$spam)))
conditionalEntropy <- function(t) {
(sum(t[,1])*entropy(t[,1]) + sum(t[,2])*entropy(t[,2]))/sum(t)
}
print(conditionalEntropy(cM))
set.seed(32297)
d <- data.frame(x=runif(100), y = runif(100))
d
head(d)
clus <- kmeans(d, centers=5)
d$cluster <- clus$cluster
d$cluster
h <- do.call(rbind,
lapply(
unique(clus$cluster),
function(c) {
f <- subset(d, cluster==c); f[chull(f),]
}
)
)
ggplot() +
geom_text(data = d, aes(label = cluster, x=x, y=y, color=cluster), size = 3) +
geom_polygon(data = h, aes(x = x, y = y, group = cluster, fill = as.factor(cluster)), alpha = 0.4, linetype = 0) +
theme(legend.position = "none")
library('ggplot2'); library('grDevices');
ggplot() +
geom_text(data = d, aes(label = cluster, x=x, y=y, color=cluster), size = 3) +
geom_polygon(data = h, aes(x = x, y = y, group = cluster, fill = as.factor(cluster)), alpha = 0.4, linetype = 0) +
theme(legend.position = "none")
table(d$cluster)
library('reshape2')
n <- dim(d)[[1]]
n
pairs <- data.frame (
ca = as.vector(outer(1:n,1:n, function(a,b) d[a, 'cluster'])),
cb = as.vector(outer(1:n,1:n, function(a,b) d[b, 'cluster'])),
dist = as.vector(outer(1:n,1:n, function(a,b) sqrt((d[a,'x']-d[b,'x'])^2 + (d[a,'y']-d[b,'y'])^2)))
)
dcast(pairs, ca-cb, value, var='dist', mean)
pairs <- data.frame (
ca = as.vector(outer(1:n,1:n, function(a,b) d[a, 'cluster'])),
cb = as.vector(outer(1:n,1:n, function(a,b) d[b, 'cluster'])),
dist = as.vector(outer(1:n,1:n, function(a,b) sqrt((d[a,'x']-d[b,'x'])^2 + (d[a,'y']-d[b,'y'])^2)))
)
dcast(pairs, ca-cb, value, var='dist', mean)
pairs
head(pairs)
dcast(pairs, pairs$ca-pairs$cb, value, var='dist', mean)
pairs <- data.frame (
ca = as.vector(outer(1:n,1:n, function(a,b) d[a, 'cluster'])),
cb = as.vector(outer(1:n,1:n, function(a,b) d[b, 'cluster'])),
dist = as.vector(outer(1:n,1:n, function(a,b) sqrt((d[a,'x']-d[b,'x'])^2 + (d[a,'y']-d[b,'y'])^2)))
)
head(pairs)
dcast(pairs, pairs$ca-pairs$cb, value, var='dist', mean)
dcast(pairs, ca-cb, value, var='dist', mean)
dcast(pairs, ca~cb, value, var='dist', mean)
dcast(pairs, ca~cb, value.var='dist', mean)
